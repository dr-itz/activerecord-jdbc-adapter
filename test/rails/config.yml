<% def _load_jdbc_driver(name); require "jdbc/#{name.downcase}"; ::Jdbc.const_get(name).load_driver(:require) end %>

default_connection: sqlite3

with_manual_interventions: false

connections:
  jdbcderby:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbch2:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbchsqldb:
    arunit:  activerecord_unittest
    arunit2: activerecord_unittest2

  jdbcpostgresql:
    arunit:
      insert_returning: <%= ENV['INSERT_RETURNING'] %>
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] %>
      username: <%= ENV['user'] || 'rails' %>
      properties:
        prepareThreshold: <%= ENV['PREPARE_THRESHOLD'] || 1 %>
    arunit2:
      insert_returning: <%= ENV['INSERT_RETURNING'] %>
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] %>
      username: <%= ENV['user'] || 'rails' %>
      properties:
        prepareThreshold: <%= ENV['PREPARE_THRESHOLD'] || 1 %>

  jdbcsqlite3:
    arunit:
      database: <%= FIXTURES_ROOT %>/fixture_database.sqlite3
      timeout:  5000
    arunit2:
      database: <%= FIXTURES_ROOT %>/fixture_database_2.sqlite3
      timeout:  5000

  db2:
    arunit:
      adapter:  ibm_db
      host:     localhost
      username: arunit
      password: arunit
      database: arunit
    arunit2:
      adapter:  ibm_db
      host:     localhost
      username: arunit
      password: arunit
      database: arunit2

  mysql2:
    arunit: &arunit
      username: <%= ENV['MY_USER'] || 'rails' %>
      encoding: utf8
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] || 'false' %>
      <% if ENV['DRIVER'] =~ /MariaDB/i; _load_jdbc_driver(:MariaDB) %>
      driver: <%= 'org.mariadb.jdbc.Driver' %>
      <% end %>
      <% if defined? JRUBY_VERSION %>
      jdbc_fetch_size: 100
      properties:
        serverTimezone: <%= java.util.TimeZone.getDefault.getID %>
      <% end %>
      collation: utf8_unicode_ci
    arunit2:
      <<: *arunit

  postgresql:
    arunit: &arunit
      <% if ENV.key?('INSERT_RETURNING') %>
      insert_returning: <%= ENV['INSERT_RETURNING'] %> # really should leave it off to no key if not set
      <% end %>
      <% if ENV.key?('PREPARED_STATEMENTS') || ENV.key?('PS') %>
      prepared_statements: <%= ENV['PREPARED_STATEMENTS'] || ENV['PS'] %> # should leave it off to its default if not set
      <% end %>
      username: <%= ENV['PGUSER'] || ENV['user'] || 'rails' %>
      jdbc_fetch_size: 100
      statement_limit: 100
      properties:
        # to not print (lengthy) traces from driver such as :
        #   SEVERE: Connection error: org.postgresql.util.PSQLException: FATAL: database "xxx" does not exist
        #loggerLevel: OFF # Broken in 42.1.4 thus let's do it manually :
        <% java.util.logging.Logger.getLogger("org.postgresql").setLevel(java.util.logging.Level::OFF) rescue nil %>
    arunit_without_prepared_statements:
      <<: *arunit
      prepared_statements: false
    arunit2:
      <<: *arunit

  sqlite3:
    arunit:
      database: <%= FIXTURES_ROOT %>/fixture_database.sqlite3
      timeout:  5000
      jdbc_fetch_size: 100
    arunit2:
      database: <%= FIXTURES_ROOT %>/fixture_database_2.sqlite3
      timeout:  5000
      jdbc_fetch_size: 100

  sqlite3_mem:
    arunit:
      adapter: sqlite3
      database: ':memory:'
    arunit2:
      adapter: sqlite3
      database: ':memory:'
